cmake_minimum_required(VERSION 3.20)
project(sokol-test)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 11)

# This Metal-only build statically targets macOS/Metal
set(SOKOL_BACKEND "SOKOL_METAL" CACHE STRING "Backend API - Metal only")
set_property(CACHE SOKOL_BACKEND PROPERTY STRINGS SOKOL_METAL)
option(USE_ARC "Enable/disable ARC" OFF)
option(USE_ANALYZER "Enable/disable clang analyzer" OFF)

# Only support macOS for this Metal-only build
if (CMAKE_SYSTEM_NAME STREQUAL Darwin)
    set(OSX_MACOS 1)
else()
    message(FATAL_ERROR "This Metal-only build only supports macOS (Darwin)")
endif()

message(">> CMAKE_CXX_COMPILER_ID: ${CMAKE_CXX_COMPILER_ID}")
message(">> SOKOL_BACKEND: ${SOKOL_BACKEND}")
if (USE_ARC)
    message(">> ObjC ARC ENABLED")
else()
    message(">> ObjC ARC DISABLED")
endif()
message(">> BUILD_TYPE: ${CMAKE_BUILD_TYPE}")
message(">> TOOLCHAIN: ${CMAKE_TOOLCHAIN_FILE}")

set(c_flags)
set(cxx_flags)
set(link_flags)
set(system_libs)

if (CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    set(c_flags ${c_flags} /W4 /WX /D_CRT_SECURE_NO_WARNINGS)
    set(cxx_flags ${cxx_flags} /W4 /WX /EHsc /D_CRT_SECURE_NO_WARNINGS)
else()
    set(c_flags ${c_flags} -Wall -Wextra -Werror -Wsign-conversion -Wstrict-prototypes)
    # GCC complains about -Wextra-semi in the C compiler, only accepts it for C++
    if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
        set(c_flags ${c_flags} -Wextra-semi)
    endif()
    set(cxx_flags ${cxx_flags} -Wall -Wextra -Werror -Wsign-conversion -fno-rtti -fno-exceptions -Wextra-semi)
    if (CMAKE_CXX_COMPILER_ID MATCHES "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
        set(c_flags ${c_flags} -Wno-missing-field-initializers)
        set(cxx_flags ${cxx_flags} -Wno-missing-field-initializers)
    endif()
    if (USE_ANALYZER)
        # FIXME: consider using clang-tidy via CMAKE_CXX_CLANG_TIDY: https://ortogonal.github.io/cmake-clang-tidy/
        # with the default settings this spams the output with irrelevant C++ coding style warnings in 3rd party libs though
        message(">> Configuring for static code analysis")
        set(c_flags ${c_flags} --analyze -Xanalyzer -analyzer-opt-analyze-headers)
        set(cxx_flags ${cxx_flags} --analyze -Xanalyzer -analyzer-opt-analyze-headers)
        set(link_flags ${link_flags} --analyze -Wno-unused-command-line-argument)
    endif()
endif()

# macOS-specific setup for Metal
set(exe_type MACOSX_BUNDLE)
if (USE_ARC)
    set(c_flags ${c_flags} -fobjc-arc)
    set(cxx_flags ${cxx_flags} -fobjc-arc)
endif()
set(system_libs ${system_libs} "-framework QuartzCore" "-framework Cocoa" "-framework AudioToolbox")
set(system_libs ${system_libs} "-framework MetalKit" "-framework Metal")

macro(configure_common target)
    target_compile_definitions(${target} PRIVATE ${SOKOL_BACKEND})
    target_link_options(${target} PRIVATE ${link_flags})
    target_link_libraries(${target} PRIVATE ${system_libs})
    target_include_directories(${target} PRIVATE ../.. ../../util)
    target_include_directories(${target} PRIVATE ../ext)
endmacro()

macro(configure_osx_properties target)
    set_target_properties(${target} PROPERTIES XCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER "${target}")
    set_target_properties(${target} PROPERTIES MACOSX_BUNDLE_GUI_IDENTIFIER "${target}")
    set_target_properties(${target} PROPERTIES MACOSX_BUNDLE_PRODUCT_NAME "${target}")
    set_target_properties(${target} PROPERTIES MACOSX_BUNDLE_BUNDLE_NAME "${target}")
endmacro()

macro(configure_c target)
    configure_common(${target})
    target_compile_options(${target} PRIVATE ${c_flags})
    target_compile_options(${target} PRIVATE -x objective-c)
    configure_osx_properties(${target})
endmacro()

macro(configure_cxx target)
    configure_common(${target})
    target_compile_options(${target} PRIVATE ${cxx_flags})
    target_compile_options(${target} PRIVATE -x objective-c++)
    configure_osx_properties(${target})
endmacro()

add_subdirectory(ext)
add_subdirectory(compile)
add_subdirectory(functional)
